学习类加载之前，我们去startActivity跳转 到 插件中的Activity看会发生什么错误（分析错误的过程中学习类加载）

宿主 跳转 宿主的Actvity       ok

宿主 跳转 插件里面的Activity  报错
分析错误原因，来学习Android类加载：
Caused by: java.lang.ClassNotFoundException: Didn't find class "com.netease.plugin_package.PluginActivity" on path:
 DexPathList[[zip file "/data/app/com.netease.hookproject-1/base.apk", zip file "/data/app/com.netease.hookproject-1/split_lib_
 dependencies_apk.apk", zip file "/data/app/com.netease.hookproject-1/split_lib_slice_0_apk.apk", zip file "/data/app/com
 .netease.hookproject-1/split_lib_slice_1_apk.apk", zip file "/data/app/com.netease.hookproject-1/split_lib_slice_2_apk.apk"
 , zip file "/data/app/com.netease.hookproject-1/split_lib_slice_3_apk.apk", zip file "/data/app/com.netease.hookproject-1/s
 plit_lib_slice_4_apk.apk", zip file "/data/app/com.netease.hookproject-1/split_lib_slice_5_apk.apk", zip file "/data/app/com
 .netease.hookproject-1/split_lib_slice_6_apk.apk", zip file "/data/app/com.netease.hookproject-1/split_lib_slice_7_apk.apk",
 zip file "/data/app/com.netease.hookproject-1/split_lib_slice_8_apk.apk", zip file "/data/app/com.netease.hookproject-1/spli
 t_lib_slice_9_apk.apk"],nativeLibraryDirectories=[/vendor/lib, /system/lib]]

 startActivity --> AMS ---> ActivityThread(把代理的Activity给换回来了) ---> 要去实例化Activity （报错）

 Activity --> Instrumentation ---> AMS检查 --->
    ActivityThread (即将加载)-（handleLaunchActivity 类加载Activity performLaunchActivity ---> newActivity(cl == PathClassLoader)）


分析Android中的ClassLoader：
    1.java中的ClassLoader 和 Android的ClassLoader 是不一样
    2.ClassLoader == PathClassLoader
    3.PathClassLoader == cl.loadClass(className).newInstance();

PathClassLoader.loadClass  ---》 BaseDexClassLoader --》ClassLoader.loadClass--findClass(空方法) 让覆盖的子类方法去完成 --》
BaseDexClassLoader.findClass() ---》pathList.findClass

BaseDexClassLoader.findClass() -- c 为什么为null，--》 DexPathList.findClass(className) ---》DexFile.loadClassBinaryName（系列步骤后 NDK）

for遍历 dexElements == Element[] ，分析 Element 是什么 ，为什么Element.dexFile==null?

Android虚拟机 dex文件的  dex == 对Dex表现形式的描述  Element  ---  dexFile拥有可执行

为什么 Element ==null?
答：就是因为类加载机制加载的是  ---》 宿主的 classes.dex--Elements，   【没有插件的Element】

解决方案：把插件的dexElements 和 宿主中的 dexElements 融为一体  PathClassLoader 就能加载到 插件/宿主  都可以加载到了
Hook式 插件化







------ Android ClassLoader介绍
1.java中的ClassLoader 和 Android的ClassLoader 是不一样
2.Android中的ClassLoader 分为两类：系统提供的ClassLoader ---》BootClassLoader，PathClassLoader，DexClassLoader
                                  自定义ClassLoader

给系统预加载使用的 ：BootClassLoader
给程序/系统程序/应用程序 加载class的 PathClassLoader
加载 apk zip apk文件 DexClassLoader

1.内核启动 ...
2.init第一个进程
3.zygote进程
  // 启动是很早就要启动
  ---> zygoteInit --> BootClassLoader.getInstance();     @1handleSystemServerProcess PathClassLoaderFactory --》PathClassLoader
4.zygote进程孵化 SystemServer
5.SystemServer启动很多的服务 ---（AMS，PSM，...）
// 不能在这里启动









    1.java中的ClassLoader 和 Android的ClassLoader 是不一样
    2.ClassLoader == PathClassLoader
    3.PathClassLoader == cl.loadClass(className).newInstance();
    PathClassLoader.loadClass()
    源码中没有loadClass()，查找父类BaseDexClassLoader，也没有在查找父类ClassLoader：双亲委派原则（找得到父类的用父类的，找不到就委托用子类的）--》findClass（子类实现）

        protected Class<?> loadClass(String name, boolean resolve)
            throws ClassNotFoundException
        {
                // First, check if the class has already been loaded
                Class c = findLoadedClass(name);
                if (c == null) {
                    long t0 = System.nanoTime();
                    try {
                        if (parent != null) {
                            c = parent.loadClass(name, false);
                        } else {
                            c = findBootstrapClassOrNull(name);
                        }
                    } catch (ClassNotFoundException e) {
                        // ClassNotFoundException thrown if class not found
                        // from the non-null parent class loader
                    }

                    if (c == null) {
                        // If still not found, then invoke findClass in order
                        // to find the class.
                        long t1 = System.nanoTime();
                        c = findClass(name);

                        // this is the defining class loader; record the stats
                    }
                }
                return c;
        }
        //子类实现具体返回什么
            protected Class<?> findClass(String name) throws ClassNotFoundException {
                throw new ClassNotFoundException(name);
            }

        又回到子类的BaseDexClassLoader的findClass
            //关键：：：：Class c = pathList.findClass(name, suppressedExceptions);  null时报异常

            private final DexPathList pathList; --》findClass（）
            @Override
            protected Class<?> findClass(String name) throws ClassNotFoundException {
                List<Throwable> suppressedExceptions = new ArrayList<Throwable>();
                Class c = pathList.findClass(name, suppressedExceptions);
                if (c == null) {
                    ClassNotFoundException cnfe = new ClassNotFoundException("Didn't find class \"" + name + "\" on path: " + pathList);
                    for (Throwable t : suppressedExceptions) {
                        cnfe.addSuppressed(t);
                    }
                    throw cnfe;
                }
                return c;
            }



    DexPathList：  遍历dexElements--》DexFile dex = element.dexFile-》dex.loadClassBinaryName（）ndk方法

        private Element[] dexElements;//dex文件可能不止一个
        public Class findClass(String name, List<Throwable> suppressed) {
            for (Element element : dexElements) {
                DexFile dex = element.dexFile; // element.dexFile == null

                if (dex != null) {
                    Class clazz = dex.loadClassBinaryName(name, definingContext, suppressed);
                    if (clazz != null) {
                        return clazz;
                    }
                }
            }
            if (dexElementsSuppressedExceptions != null) {
                suppressed.addAll(Arrays.asList(dexElementsSuppressedExceptions));
            }
            return null;
        }

        for遍历 dexElements == Element[] ，分析 Element 是什么 ，为什么Element.dexFile==null?

        Android虚拟机 dex文件的  Element == 对dex物理文件表现形式的描述（面向对象化）   Element  ---  dexFile拥有可执行

        为什么 Element ==null?
        答：就是因为类加载机制加载的是  ---》 宿主的 classes.dex--Elements，   【没有插件的Element】





ActivityThread->performLaunchActivity:
java.lang.ClassLoader cl = r.packageInfo.getClassLoader();//最终是PathClassLoader
            activity = mInstrumentation.newActivity(
                    cl, component.getClassName(), r.intent);//使用LoadedAPK内的ClassLoader创建出activity

Instrumentation：
    public Activity newActivity(ClassLoader cl, String className,
            Intent intent)
            throws InstantiationException, IllegalAccessException,
            ClassNotFoundException {
        return (Activity)cl.loadClass(className).newInstance();
    }




ActivityThread.java:
private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) {
        // System.out.println("##### [" + System.currentTimeMillis() + "] ActivityThread.performLaunchActivity(" + r + ")");
        Activity activity = null;
        try {//此处为pathClassLoader
            java.lang.ClassLoader cl = r.packageInfo.getClassLoader();//自定义的LoadedAPK内的ClassLoader
            activity = mInstrumentation.newActivity(
                    cl, component.getClassName(), r.intent);//使用LoadedAPK内的ClassLoader创建出activity
            StrictMode.incrementExpectedActivityCount(activity.getClass());
            r.intent.setExtrasClassLoader(cl);
            r.intent.prepareToEnterProcess();
            if (r.state != null) {
                r.state.setClassLoader(cl);
            }
    }



LoadedApk.java:
    public ClassLoader getClassLoader() {
        synchronized (this) {
            if (mClassLoader == null) {
                createOrUpdateClassLoaderLocked(null /*addedPaths*/);
            }
            return mClassLoader;
        }
    }


    private void createOrUpdateClassLoaderLocked(List<String> addedPaths) {
        if (mPackageName.equals("android")) {
            // Note: This branch is taken for system server and we don't need to setup
            // jit profiling support.
            if (mClassLoader != null) {
                // nothing to update
                return;
            }

            if (mBaseClassLoader != null) {
                mClassLoader = mBaseClassLoader;
            } else {
                mClassLoader = ClassLoader.getSystemClassLoader();
            }

            return;
        }
    }

ClassLoader.java:

    public static ClassLoader getSystemClassLoader() {
        return SystemClassLoader.loader;
    }

    static private class SystemClassLoader {
            public static ClassLoader loader = ClassLoader.createSystemClassLoader();
    }


    private static ClassLoader createSystemClassLoader() {
        String classPath = System.getProperty("java.class.path", ".");
        String librarySearchPath = System.getProperty("java.library.path", "");

        // String[] paths = classPath.split(":");
        // URL[] urls = new URL[paths.length];
        // for (int i = 0; i < paths.length; i++) {
        // try {
        // urls[i] = new URL("file://" + paths[i]);
        // }
        // catch (Exception ex) {
        // ex.printStackTrace();
        // }
        // }
        //
        // return new java.net.URLClassLoader(urls, null);

        // TODO Make this a java.net.URLClassLoader once we have those?
        return new PathClassLoader(classPath, librarySearchPath, BootClassLoader.getInstance());
    }